// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: rating/rating-service.proto

package rating

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RatingService_GetAllRatings_FullMethodName             = "/RatingService/GetAllRatings"
	RatingService_CreateAccommodationRating_FullMethodName = "/RatingService/CreateAccommodationRating"
	RatingService_CreateHostRating_FullMethodName          = "/RatingService/CreateHostRating"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	GetAllRatings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RatingsList, error)
	CreateAccommodationRating(ctx context.Context, in *CreateAccommodationRatingDTO, opts ...grpc.CallOption) (*Empty, error)
	CreateHostRating(ctx context.Context, in *CreateHostRatingDTO, opts ...grpc.CallOption) (*Empty, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) GetAllRatings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RatingsList, error) {
	out := new(RatingsList)
	err := c.cc.Invoke(ctx, RatingService_GetAllRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CreateAccommodationRating(ctx context.Context, in *CreateAccommodationRatingDTO, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RatingService_CreateAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CreateHostRating(ctx context.Context, in *CreateHostRatingDTO, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RatingService_CreateHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	GetAllRatings(context.Context, *Empty) (*RatingsList, error)
	CreateAccommodationRating(context.Context, *CreateAccommodationRatingDTO) (*Empty, error)
	CreateHostRating(context.Context, *CreateHostRatingDTO) (*Empty, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) GetAllRatings(context.Context, *Empty) (*RatingsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRatings not implemented")
}
func (UnimplementedRatingServiceServer) CreateAccommodationRating(context.Context, *CreateAccommodationRatingDTO) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) CreateHostRating(context.Context, *CreateHostRatingDTO) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostRating not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_GetAllRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAllRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAllRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAllRatings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CreateAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccommodationRatingDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_CreateAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateAccommodationRating(ctx, req.(*CreateAccommodationRatingDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CreateHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRatingDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_CreateHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateHostRating(ctx, req.(*CreateHostRatingDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRatings",
			Handler:    _RatingService_GetAllRatings_Handler,
		},
		{
			MethodName: "CreateAccommodationRating",
			Handler:    _RatingService_CreateAccommodationRating_Handler,
		},
		{
			MethodName: "CreateHostRating",
			Handler:    _RatingService_CreateHostRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rating/rating-service.proto",
}
